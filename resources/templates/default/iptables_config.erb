###############################################################################
### Generated by Chef for <%= node.name %>
################################################################################
*filter
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:dropDNSrep - [0:0]
:dropUPnP - [0:0]
:Reject - [0:0]
:dropBMcast - [0:0]
:dropInvalid - [0:0]
:dropNotSyn - [0:0]
:dropSMB - [0:0]
:dropLANSync - [0:0]
:reject - [0:0]
:managersChain - [0:0]
:radiusAccountingChain - [0:0]
:radiusProxyChain - [0:0]
:sensorsChain - [0:0]
# LOCALHOST AND ESTABLISHED CONNECTION ALLOWED
-A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
-A INPUT -i lo -j ACCEPT
<% if @ifsync != @ifmgt %>
-A INPUT -i <%= @ifsync %> -s <%= @netsync %>  -j ACCEPT
<% end %>
# DROP INPUT
-A INPUT -d 224.0.0.0/4 -p 112 -j managersChain
-A INPUT -d 224.0.0.0/4 -p 112 -j DROP
-A INPUT -i <%= @ifsync %> -d 224.0.0.0/4 -j ACCEPT
# ALLOW PING
-A INPUT -m state --state NEW -p icmp -m icmp --icmp-type echo-request -j ACCEPT
# SSH PORT ALLOWED
-A INPUT -m state --state NEW -p tcp -m tcp --dport 22 -j ACCEPT
# DEFAULT PORTS
-A INPUT -m state --state NEW -p tcp -m tcp --dport 25 -j ACCEPT
-A INPUT -m state --state NEW -p tcp -m tcp --dport 4443 -j ACCEPT
# MANAGER SERVICES
<% if !@manager.nil? && !@manager.empty? %>
  <% m_services = @manager[:redborder][:services] if !@manager[:redborder].nil? && !@manager[:redborder][:services].nil? %>
  <% if m_services["n2kmobiled"] %>
-A INPUT -m state --state NEW -p tcp -m tcp --dport 5050 -j sensorsChain
  <% end %>
  <% if m_services["n2klocd"] %>
-A INPUT -m state --state NEW -p tcp -m tcp --dport <%= node["redborder"]["n2klocd"]["portmeraki"].to_s   %> -j ACCEPT
-A INPUT -m state --state NEW -p tcp -m tcp --dport <%= node["redborder"]["n2klocd"]["porthttp"].to_s     %> -j ACCEPT
-A INPUT -m state --state NEW -p tcp -m tcp --dport <%= node["redborder"]["n2klocd"]["port"].to_s         %> -j ACCEPT
  <% end %>
  <% if m_services["freeradius"] %>
-A INPUT -m state --state NEW -p udp -m udp --dport 1813 -j ACCEPT
-A INPUT -m state --state NEW -p udp -m udp --dport 1812 -j ACCEPT
  <% end %>
  <% if m_services["nginx"] %>
-A INPUT -m state --state NEW -p tcp -m tcp --dport 8000 -j ACCEPT
  <% end %>
  <% if m_services["webui"] %>
-A INPUT -m state --state NEW -p tcp -m tcp --dport 7980 -j ACCEPT
-A INPUT -m state --state NEW -p tcp -m tcp --dport 443  -j ACCEPT
-A INPUT -m state --state NEW -p tcp -m tcp --dport 80  -j ACCEPT
-A INPUT -m state --state NEW -p tcp -m tcp --dport 8080  -j ACCEPT
  <% end %>
# Consul web port
  <% if m_services["consul"] %>
-A INPUT -m state --state NEW -p tcp -m tcp --dport 8500 -j ACCEPT
  <% end %>
# Druid-console port
  <% if m_services["druid-realtime"] %>
-A INPUT -m state --state NEW -p tcp -m tcp --dport 8081 -j ACCEPT
  <% end %>
  <% if m_services["kafka"] %>
-A INPUT -m state --state NEW -p tcp -m tcp --dport 9092 -j ACCEPT
  <% end %>
# SFLOW PORT ALLOWED
  <% if m_services["pmacct"] %>
-A INPUT -m state --state NEW -p udp -m udp --dport 6343 -j sensorsChain
  <% end %>
  <% if m_services["f2k"] %>
-A INPUT -m state --state NEW -p udp -m udp --dport 2055 -j sensorsChain
  <% end %>
  <% if m_services["memcached"] %>
-A INPUT -m state --state NEW -p udp -m udp --dport 11211 -j ACCEPT
-A INPUT -m state --state NEW -p tcp -m tcp --dport 11211 -j ACCEPT
  <% end %>
  <% if m_services["http2k"] %>
-A INPUT -m state --state NEW -p tcp -m tcp --dport 7980 -j ACCEPT
-A INPUT -m state --state NEW -p udp -m udp --dport 7980 -j ACCEPT
  <% end %>
<% end %>
# SENSOR SERVICES
-A INPUT -m state --state NEW -p udp -m udp --dport 514 -j ACCEPT
-A INPUT -m state --state NEW -p udp -m udp --dport 162 -j sensorsChain
# FORWARD
-A FORWARD -j DROP
<% if !@manager["network"].nil? and !@manager["network"]["interfaces"].nil? %>
# <%= @manager.name %>
  <% @manager["network"]["interfaces"].each do |iface|
    iface=iface[0]
    if iface.match(/^bond[\d]+$/).nil?
        unless @manager["network"]["interfaces"][iface].nil?
            unless @manager["network"]["interfaces"][iface]["addresses"].nil?
                @manager["network"]["interfaces"][iface]["addresses"].each do |x|
                    if x[1]["family"]=="lladdr" %>
-A managersChain -m mac --mac-source <%= x[0] %> -j ACCEPT
  <%                end
                    end
                    end
                    end
                    end
                    end %>
<% end %>
# SENSORS (<%= @sensors.size if !@sensor.nil? && !@sensor.empty? %>)
<% ip_sensors = {} %>
<%- @sensors.each do |sensor| %>
  <%- if ip_sensors[sensor[:ipaddress]].nil? and !sensor[:ipaddress].nil? and !sensor[:ipaddress].empty? and (!/^((?:(25[0-5]|2[0-4][0-9]|[1][0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|[1][0-9][0-9]|[1-9][0-9]|[0-9]))$/.match(sensor[:ipaddress]).nil? or !/^((?:(25[0-5]|2[0-4][0-9]|[1][0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|[1][0-9][0-9]|[1-9][0-9]|[0-9]))(\/(\d|[1-2]\d|3[0-2]))$/.match(sensor[:ipaddress]).nil?) and sensor["redborder"]["parent_id"].nil? %>
-A sensorsChain -s <%= sensor[:ipaddress] %> -j ACCEPT
    <% ip_sensors[sensor[:ipaddress]] = sensor %>
  <%- end %>
  <% if sensor["network"] and sensor["network"]["interfaces"] and sensor["network"]["interfaces"].size>0 %>
    <% sensor["network"]["interfaces"].each do |sif, sifv| %>
      <% if sif=~ /^bond[\d]+$/ and sifv["addresses"] %>
        <% sifv["addresses"].each do |address, addressv| %>
          <% if ip_sensors[address].nil? and addressv["family"] == "inet" %>
-A sensorsChain -s <%= address %> -j ACCEPT
            <% ip_sensors[address] = sensor %>
          <%- end %>
        <%- end %>
      <%- end %>
    <%- end %>
  <%- end %>
<%- end %>
# Cloud Proxy nodes (<%= @cloudproxy_nodes.size %>)
<%- @cloudproxy_nodes.each do |sensor| %>
  <% if !sensor["redborder"]["ipsync"].nil? %>
-A sensorsChain -s <%= sensor["redborder"]["ipsync"] %> -j ACCEPT
  <% end %>
<% end %>
# REJECT WHATEVER LEFT
-A sensorsChain -j Reject
-A sensorsChain -m limit --limit 5/min -j LOG --log-prefix  "REJECT ACCESS "
-A sensorsChain -j reject
-A INPUT -j Reject
-A INPUT -j reject
-A OUTPUT -p vrrp -j ACCEPT
-A Reject -j dropBMcast
-A Reject -j dropInvalid
-A Reject -j dropUPnP
-A Reject -p tcp -j dropNotSyn
-A Reject -j dropDNSrep
-A Reject -j dropSMB
-A Reject -j dropLANSync
-A dropDNSrep -p udp -m udp --sport 53 -j DROP
-A dropUPnP -p udp -m udp --dport 1900 -j DROP
-A dropInvalid -m state --state INVALID -j DROP
-A dropNotSyn -p tcp -m tcp ! --tcp-flags FIN,SYN,RST,ACK SYN -j DROP
-A dropBMcast -d 255.255.255.255/32 -j DROP
-A dropBMcast -d 224.0.0.0/4 -j DROP
-A dropSMB -p udp -m udp --dport 135 -j DROP
-A dropSMB -p udp -m udp --dport 137:139 -j DROP
-A dropSMB -p udp -m udp --dport 445 -j DROP
-A dropSMB -p tcp -m tcp --dport 135 -j DROP
-A dropSMB -p tcp -m tcp --dport 139 -j DROP
-A dropSMB -p tcp -m tcp --dport 445 -j DROP
-A dropLANSync -p udp -m udp --sport 17500 --dport 17500 -j DROP
-A reject -d 255.255.255.255/32 -j DROP
-A reject -d 224.0.0.0/4 -j DROP
-A reject -s 255.255.255.255/32 -j DROP
-A reject -s 224.0.0.0/4 -j DROP
-A reject -p tcp -j REJECT --reject-with tcp-reset
-A reject -p udp -j REJECT --reject-with icmp-port-unreachable
-A reject -p icmp -j REJECT --reject-with icmp-host-unreachable
-A reject -j REJECT --reject-with icmp-host-prohibited
COMMIT
